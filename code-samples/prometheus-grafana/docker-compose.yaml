# To Launch Grafana:
# - `docker-compose up -d`
# - Navigate to `http://localhost:3000` in a browser and log in with the default credentials (admin/admin)
#
# To stop the containers: `docker-compose down`
#
# To stop the containers and discard state: `docker-compose down -v`

networks:
  monitoring:
    driver: bridge

services:
  grafana: 
    environment:
      - GF_USERS_DEFAULT_THEME=light
    image: grafana/grafana-oss
    networks:
      - monitoring
    ports:
      - 9000:3000
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml

  metrics-generator:
    build:
      context: ./metrics-generator
    environment:
      - PYTHONUNBUFFERED=1 # Make python print statements show up in docker logs
    ports:
      - 8000:8000
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/alert.rules.yml:/etc/prometheus/alert.rules.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - monitoring

  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
    networks:
      - monitoring

  jaeger:
    image: jaegertracing/all-in-one:latest
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"  # UI port
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"  # Admin port
      - "9411:9411"
    networks:
      - monitoring

  request-generator:
    build:
      context: ./request-generator
      dockerfile: Dockerfile.request-generator
    environment:
      - PYTHONUNBUFFERED=1 # Make python print statements show up in docker logs
    networks:
      - monitoring
    depends_on:
      - order-service

  order-service:
    build:
      context: ./services/order
      dockerfile: Dockerfile.order-service
    ports:
      - "5000:5000"
    environment:
      - FLASK_APP=order-service.py
      - FLASK_ENV=development
      - PYTHONUNBUFFERED=1 # Make python print statements show up in docker logs
    networks:
      - monitoring
    depends_on:
      - jaeger

volumes:
  grafana-data:
    driver: local
  prometheus_data:
    driver: local
